/*!
 * Remark (http://getbootstrapadmin.com/remark)
 * Copyright 2016 amazingsurge
 * Licensed under the Themeforest Standard Licenses
 */
!
function(window, document) {
    "use strict";
    function getLevel(url, tag) {
        for (var level, arr = url.split("/").reverse(), path = "", i = 0; i < arr.length; i++) arr[i] === tag && (level = i);
        for (var m = 1; level > m; m++) path += "../";
        return path
    }
    if (!window.localStorage) return null;
    var layout = "base",
    settingsName = "remark." + layout + ".skinTools",
    settings = localStorage.getItem(settingsName);
    if (settings) {
        if ("{" === settings[0] && (settings = JSON.parse(settings)), settings.primary && "primary" !== settings.primary) {
            var head = document.head,
            link = document.createElement("link");
            link.type = "text/css",
            link.rel = "stylesheet",
            link.href = getLevel(window.location.pathname, layout) + "assets/skins/" + settings.primary + ".css",
            link.id = "skinStyle",
            head.appendChild(link)
        }
        var navbarFn = setInterval(function() {
            var navbar = document.getElementsByClassName("site-navbar");
            navbar.length > 0 && (clearInterval(navbarFn), settings.navbar && "primary" !== settings.navbar && (navbar[0].className += " bg-" + settings.navbar + "-600"), settings.navbarInverse && "false" !== settings.navbarInverse && (navbar[0].className += " navbar-inverse"))
        },
        5)
    }
    document.addEventListener && document.addEventListener("DOMContentLoaded",
    function() {
        var $body = $(document.body),
        Storage = ($(document), $(window), {
            set: function(key, value) {
                return window.localStorage && key && value ? ("object" == typeof value && (value = JSON.stringify(value)), void localStorage.setItem(key, value)) : null
            },
            get: function(key) {
                if (!window.localStorage) return null;
                var value = localStorage.getItem(key);
                return value ? ("{" === value[0] && (value = JSON.parse(value)), value) : null
            }
        }),
        Skintools = {
            tpl: '<div class="site-skintools"><div class="site-skintools-inner"><div class="site-skintools-content"><div class="nav-tabs-horizontal"><div class="tab-content"><div role="tabpanel" id="skintoolsNavbar" class="tab-pane active"></div><button class="btn btn-outline btn-block btn-primary margin-top-20" id="skintoolsReset" type="button">重 置</button></div></div></div></div></div>',
            skintoolsNavbar: ["primary", "brown", "cyan", "green", "grey", "indigo", "orange", "pink", "purple", "red", "teal", "yellow"],
            navbarSkins: "bg-primary-600 bg-brown-600 bg-cyan-600 bg-green-600 bg-grey-600 bg-indigo-600 bg-orange-600 bg-pink-600 bg-purple-600 bg-red-600 bg-teal-600 bg-yellow-700",
            storageKey: settingsName,
            defaultSettings: {
                navbar: "primary",
            },
            init: function() {
                var self = this;
                this.path = getLevel(window.location.pathname, layout),
                this.overflow = !1,
                this.$siteSidebar = $(".site-menubar"),
                this.$siteNavbar = $(".site-navbar"),
                this.$container = $(this.tpl),
                this.$toggle = $(".site-skintools-toggle", this.$container),
                this.$content = $(".site-skintools-content", this.$container),
                this.$tabContent = $(".tab-content", this.$container),
                this.$navbar = $("#skintoolsNavbar", this.$content),
                this.build(this.$navbar, this.skintoolsNavbar, "skintoolsNavbar", "radio", "导航皮肤"),
                this.$container.appendTo($body),
                this.$toggle.on("click",
                function() {
                    self.$container.toggleClass("is-open")
                }),
                $("#skintoolsNavbar input").on("click",
                    function() {
                        self.navbarEvents(this)
                    }),
                $("#skintoolsReset").on("click",
                function() {
                    self.reset()
                }),
                this.initLocalStorage()
            },
            initLocalStorage: function() {
                var self = this;
                this.settings = Storage.get(this.storageKey),
                null === this.settings && (this.settings = $.extend(!0, {},
                this.defaultSettings), Storage.set(this.storageKey, this.settings)),
                this.settings && $.isPlainObject(this.settings) && $.each(this.settings,
                function(n, v) {
                    switch (n) {
                    case "navbar":
                        $('input[value="' + v + '"]', self.$navbar).prop("checked", !0),
                        self.navbarImprove(v);
                        break;
                    case "navbarInverse":
                        var flag = "true" === v ? !1 : !0;
                        $('input[value="inverse"]', self.$navbar).prop("checked", flag),
                        self.navbarImprove("inverse", flag);
                        break;
                    }
                })
            },
            updateSetting: function(item, value) {
                this.settings[item] = value,
                Storage.set(this.storageKey, this.settings)
            },
            title: function(content) {
                return $('<h4 class="site-skintools-title" style="font-size:16px;">' + content + "</h4>")
            },
            item: function(type, name, id, content) {
                var item = '<div class="' + type + "-custom " + type + "-" + content + '"><input id="' + id + '" type="' + type + '" name="' + name + '" value="' + content + '"><label for="' + id + '">' + content + "</label></div>";
                return $(item)
            },
            build: function($wrap, data, name, type, title) {
                title && this.title(title).appendTo($wrap);
                for (var i = 0; i < data.length; i++) this.item(type, name, name + "-" + data[i], data[i]).appendTo($wrap)
            },
            navbarEvents: function(self) {
                var val = $(self).val(),
                checked = $(self).prop("checked");
                this.navbarImprove(val, checked),
                "inverse" === val ? this.updateSetting("navbarInverse", checked.toString()) : this.updateSetting("navbar", val)
            },
            navbarImprove: function(val, checked) {
                if ("inverse" === val) checked ? this.$siteNavbar.addClass("navbar-inverse") : this.$siteNavbar.removeClass("navbar-inverse");
                else {
                    var bg = "bg-" + val + "-600";
                    "yellow" === val && (bg = "bg-yellow-700"),
                    "primary" === val && (bg = ""),
                    this.$siteNavbar.removeClass(this.navbarSkins).addClass(bg)
                }
            },
            reset: function() {
                localStorage.clear(),
                this.initLocalStorage()
            }
        };
        Skintools.init()
    })
} (window, document);